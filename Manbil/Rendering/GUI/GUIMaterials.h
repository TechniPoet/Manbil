#pragma once

#include "../Materials/Data Nodes/ShaderGenerator.h"
#include "../Helper Classes/DrawingQuad.h"


//A static class that can generate commonly-used materials for the GUI system.
static class GUIMaterials : public ShaderGenerator
{
public:

    //Uniform parameters for any materials generated by this class.
    static const std::string QuadDraw_Color, QuadDraw_Texture2D;
    //Generates a material that draws a texture multiplied by a vec4 color uniform.
    static ShaderGenerator::GeneratedMaterial GenerateStaticQuadDrawMaterial(UniformDictionary & params, bool isTexGreyscale,
                                                                             ShaderInOutAttributes vertexAttrs = DrawingQuad::GetAttributeData(),
                                                                             unsigned int vertexPosIndex = 0, unsigned int vertexUVIndex = 1);

    //Uniform parameter for the time lerp. Only used for dynamic materials generated by this class.
    static const std::string DynamicQuadDraw_TimeLerp;
    //Generates a material that dynamically changes its properties based on a time lerp uniform.
    static ShaderGenerator::GeneratedMaterial GenerateDynamicQuadDrawMaterial(UniformDictionary & params, bool isTexGreyscale,
                                                                              DataLine endScale = Vector2f(1.0f, 1.0f),
                                                                              DataLine endColor = Vector4f(1.0f, 1.0f, 1.0f, 1.0f),
                                                                              ShaderInOutAttributes vertexAttrs = DrawingQuad::GetAttributeData(),
                                                                              unsigned int vertexPosIndex = 0,
                                                                              unsigned int vertexUVIndex = 1);
};